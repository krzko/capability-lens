generator client {
  provider = "prisma-client-js"
}

generator seeder {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  organisations OrganisationUser[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organisation {
  id        String             @id @default(cuid())
  name      String
  teams     Team[]
  users     OrganisationUser[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model OrganisationUser {
  id             String       @id @default(cuid())
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  role           String       @default("member") // member, admin
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([organisationId, userId])
}

model Team {
  id             String       @id @default(cuid())
  name           String
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Restrict)
  organisationId String
  services       Service[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organisationId]) // Optimise organisation lookups
  @@index([name]) // Optimise team name searches
}

model MaturityTemplate {
  id          String        @id @default(cuid())
  name        String
  description String?
  facets      Facet[]
  assessments Assessment[]
  isCustom    Boolean       @default(true)
  templateSchema Json        // Store the complete JSON schema including facet definitions
  version     String        @default("0.1.0")
  createdBy   String?       // User ID who created the custom template
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([name]) // Optimise template name searches
  @@index([isCustom]) // Optimise filtering custom vs core templates
}

model Facet {
  id          String        @id @default(cuid())
  name        String
  description String?
  template    MaturityTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId  String
  levels      Level[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([templateId]) // Optimise template lookups
}

model Level {
  id          String        @id @default(cuid())
  number      Int
  name        String
  description String
  facet       Facet         @relation(fields: [facetId], references: [id], onDelete: Cascade)
  facetId     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Service {
  id          String        @id @default(cuid())
  name        String
  description String?
  team        Team          @relation(fields: [teamId], references: [id], onDelete: Restrict)
  teamId      String
  assessments Assessment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([teamId]) // Optimise team lookups
  @@index([name]) // Optimise service name searches
  @@index([createdAt]) // Optimise date-based queries
}

model Assessment {
  id          String   @id @default(cuid())
  template    MaturityTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId  String
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId   String
  scores      Json     // Store facet scores and evidence as {facetName: { score: number, evidence?: string }}
  assessor    String?  // Name or ID of the person who performed the assessment
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([serviceId]) // Optimise service lookups
  @@index([templateId]) // Optimise template lookups
  @@index([createdAt]) // Optimise recent assessments queries
  @@index([serviceId, createdAt]) // Optimise service's recent assessments
}

model HistoricalStats {
  id              String   @id @default(cuid())
  date            DateTime
  totalServices   Int
  totalTeams      Int
  averageMaturity Float
  assessmentCount Int
  createdAt       DateTime @default(now())

  @@index([date])
}

